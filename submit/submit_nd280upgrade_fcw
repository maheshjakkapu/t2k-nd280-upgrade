#!/usr/bin/perl

#-------------------------------------------------------------------------------------------------------------------------------
# Submit a batch of build_marg_toys.C jobs
#
# Inputs
#  --resource               : Computer resource, <ETH-Monch, RAL, Oxford, Grid, interactive>. Default: interactive.
#  --tag                    : Tag for output files.
#  --fit-param-list         : Fit parameter list. See FitParamList.h for allowed options.
#  --physparam-freepar      : Free parameter
#  --npt-freepar            : Number of points of the free parameter to scan
#  --step-freepar           : Step of the free parameter scan
#
# D.Sgalaberna
#-------------------------------------------------------------------------------------------------------------------------------
#

use File::Path;

$iarg=0;
foreach (@ARGV) {

    if($iarg % 2 == 1) {$iarg++; next;}
    
    ##################################### Common ########################################
    if   ($_ eq '--resource'         ) { $resource        = $ARGV[$iarg+1]; }
    elsif($_ eq '--tag'              ) { $tag             = $ARGV[$iarg+1]; }
    elsif($_ eq '--nruns'            ) { $nruns           = $ARGV[$iarg+1]; }
    elsif($_ eq '--inputfile'        ) { $inputfile       = $ARGV[$iarg+1]; }
    elsif($_ eq '--first_expt'       ) { $first_expt      = $ARGV[$iarg+1]; }
    elsif($_ eq '--nexpts'           ) { $nexpts          = $ARGV[$iarg+1]; }

    # where to put the output files
    elsif($_ eq '--job-dir'          ) { $job_dir         = $ARGV[$iarg+1]; }
    # where is the software (/t2k-nd280-upgrade)
    elsif($_ eq '--softw-dir'        ) { $softw_dir       = $ARGV[$iarg+1]; }    
    
    elsif($_ eq '--docut-reac'       ) { $docut_reac      = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-cc'         ) { $docut_cc        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-reac'         ) { $cut_reac        = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-mater'      ) { $docut_mater     = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-vertex'     ) { $docut_vertex    = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-target1'    ) { $docut_target1   = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-target2'    ) { $docut_target2   = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-fgd1'       ) { $docut_fgd1      = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-fgd2'       ) { $docut_fgd2      = $ARGV[$iarg+1]; }

    elsif($_ eq '--cut-fv1-minX'      ) { $cut_fv1_minX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxX'      ) { $cut_fv1_maxX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-minY'      ) { $cut_fv1_minY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxY'      ) { $cut_fv1_maxY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-minZ'      ) { $cut_fv1_minZ     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv1-maxZ'      ) { $cut_fv1_maxZ     = $ARGV[$iarg+1]; }

    elsif($_ eq '--cut-fv2-minX'      ) { $cut_fv2_minX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxX'      ) { $cut_fv2_maxX     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-minY'      ) { $cut_fv2_minY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxY'      ) { $cut_fv2_maxY     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-minZ'      ) { $cut_fv2_minZ     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fv2-maxZ'      ) { $cut_fv2_maxZ     = $ARGV[$iarg+1]; }
    
    elsif($_ eq '--cut-fgd-fv1-minX'  ) { $cut_fgd_fv1_minX = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv1-maxX'  ) { $cut_fgd_fv1_maxX = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv1-minY'  ) { $cut_fgd_fv1_minY = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv1-maxY'  ) { $cut_fgd_fv1_maxY = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv1-minZ'  ) { $cut_fgd_fv1_minZ = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv1-maxZ'  ) { $cut_fgd_fv1_maxZ = $ARGV[$iarg+1]; }

    elsif($_ eq '--cut-fgd-fv2-minX'  ) { $cut_fgd_fv2_minX = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv2-maxX'  ) { $cut_fgd_fv2_maxX = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv2-minY'  ) { $cut_fgd_fv2_minY = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv2-maxY'  ) { $cut_fgd_fv2_maxY = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv2-minZ'  ) { $cut_fgd_fv2_minZ = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-fgd-fv2-maxZ'  ) { $cut_fgd_fv2_maxZ = $ARGV[$iarg+1]; }

    elsif($_ eq '--docut-vtxX'       ) { $docut_vtxX      = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-xmin'         ) { $cut_xmin        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-xmax'         ) { $cut_xmax        = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-vtxZ'       ) { $docut_vtxZ      = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-zmin'         ) { $cut_zmin        = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-zmax'         ) { $cut_zmax        = $ARGV[$iarg+1]; }
     
    elsif($_ eq '--docut-pdg'        ) { $docut_pdg       = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-pdg'          ) { $cut_pdg         = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-parid'      ) { $docut_parid     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-parid'        ) { $cut_parid       = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-charge'     ) { $docut_charge     = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-charge'       ) { $cut_charge       = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-dl-target'  ) { $docut_dl_target  = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-dl-target'    ) { $cut_dl_target    = $ARGV[$iarg+1]; }
    elsif($_ eq '--docut-dlyz-tpc'   ) { $docut_dlyz_tpc   = $ARGV[$iarg+1]; }
    elsif($_ eq '--cut-dlyz-tpc'     ) { $cut_dlyz_tpc     = $ARGV[$iarg+1]; }
    
    else {
	print "Unrecognised argument ".$_."\n"; exit;
    }
    $iarg++;
}

$resource        = "interactive"                 unless defined $resource;

#$tag             = "SelND280Up_6E20_Classic_AllECal_1_2_17" unless defined $tag;
#$tag             = "SelND280Up_6E20_Current_AllECal_1_2_17" unless defined $tag; 
#$tag             = "SelND280Up_6E20_Alter_targ_ftpc_AllECal" unless defined $tag;
#$tag             = "SelND280Up_6E20_Alter_targ_ftpc_AllECal_FGD2" unless defined $tag;
$tag            = "Histos" unless defined $tag;

#$inputfile        = "/neutrino/data7/davide/files/ND280Upgrade/GEANT4Sim/0p2T/1_2_17_ECalAll/g4ND280Up_6E20_classic_ECalAll_1_2_17_AllTrkPt.root" unless defined $inputfile;
#$inputfile        = "/neutrino/data7/davide/files/ND280Upgrade/GEANT4Sim/0p2T/1_2_17_ECalAll/g4ND280Up_6E20_current_ECalAll_1_2_17_All.root" unless defined $inputfile;
#$inputfile        = "/neutrino/data7/davide/files/ND280Upgrade/GEANT4Sim/0p2T/1_2_17_ECalAll/g4ND280Up_6E20_alter_targ_ftpc_ECalAll_28_2_17_All.root" unless defined $inputfile;

#$inputfile        = "/home/cjesus/Desktop/prueba.root" unless defined $inputfile;
#$inputfile        = "/home/cjesus/Desktop/pgun_low_hatpc-Exp0-Nexpt100000.root" unless defined $inputfile;
#$inputfile         = "$softw_dir/" unless defined $inputfile;
$inputfile         = "/nfs/pic.es/user/c/cjesus/scripts/bash/g4ND280Up_FHC_GENIE_1E21_UniTarget-FGD12_wholeDetector-Exp0-Nexpt1000.root" unless defined $inputfile;
#$inputfile         = "/nfs/pic.es/user/c/cjesus/scripts/bash/g4ND280Up_FHC_GENIE_1E21_UniTarget-FGD12_wholeDetector-Exp0-Nexpt100.root" unless defined $inputfile;
#$inputfile         = "/nfs/neutrinos/cjesus/work/iRODS_files/Sim_Opt_Productions/CesarProd/good_size_good_position/fullproduction/full_production.root" unless defined $inputfile;

#$inputfile        = "/home/cjesus/Desktop/PhD/T2K/ND280/simulations/work/pgun_hatpc-Exp0-Nexpt10000.root" unless defined $inputfile;

#$inputfile        = "/neutrino/data7/davide/out_cluster/PROVA/production/g4ND280Up_6E20_nd280current_numubar_0p2T-All.root" unless defined $inputfile;



$first_expt      = 0                             unless defined $first_expt;

# Numu Beam
#$nruns           = 21                             unless defined $nruns; # TPC+Target+ECal 
#$nexpts          = 20000                          unless defined $nexpts;
$nruns           = 90                             unless defined $nruns; # TPC+Target+ECal (Store all TrackPoints)
$nexpts          = 10000                          unless defined $nexpts;


$irun = 0;
while($irun < $nruns) { # loop over the jobs
    
    $evt_first = $first_expt + $irun * $nexpts;
    
    $newtag = "$tag";

#    $arguments = "root -l -q -b $softw_dir/src/app/nd280UpEvent/TND280UpTrackPoint.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpHit.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpTrack.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpVertex.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpEvent.cc+ '$softw_dir/macro/FieldCageWalls.C+($evt_first,$nexpts,\"$job_dir/$newtag\",\"$inputfile\",$cut_fv1_minX,$cut_fv1_maxX,$cut_fv1_minY,$cut_fv1_maxY,$cut_fv1_minZ,$cut_fv1_maxZ,$docut_cc,$docut_reac,$cut_reac,$docut_mater,$docut_vertex,$docut_target1,$docut_target2,$docut_fgd1,$docut_fgd2,$docut_vtxX,$cut_xmin,$cut_xmax,$docut_vtxZ,$cut_zmin,$cut_zmax,$docut_pdg,$cut_pdg,$docut_parid,$cut_parid,$docut_charge,$cut_charge,$docut_dl_target,$cut_dl_target,$docut_dlyz_tpc,$cut_dlyz_tpc)'";

 $arguments = "root -l -q -b $softw_dir/src/app/nd280UpEvent/TND280UpTrackPoint.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpHit.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpTrack.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpVertex.cc+ $softw_dir/src/app/nd280UpEvent/TND280UpEvent.cc+ '$softw_dir/macro/MaterialBudget.C+($evt_first,$nexpts,\"$job_dir/$newtag\",\"$inputfile\")'"; 

    $command = "$arguments";
    
    print "\n";
    print "Job $irun \n";
    print "First event: $evt_first \n";
    print "# of events: $nexpts \n";
    print "$command \n";
    print "\n////////////////////////////// \n\n";

    ################################### Submit the job ##################################
    
    #
    # UNIGE (Atlas cluster), $job_dir not used, $tag gives path/name of output file
    #
    if($resource eq "UNIGE-Atlas") {
	open(PBS, ">$job_dir/$newtag-$evt_first-$nexpts.sbatch") or die("Can not create the sbatch script");
	print PBS "#!/bin/bash -l  \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.sh $softw_dir \n";
	print PBS "$command \n";
	close(PBS);	
	`qsub -q veryshort -l vmem=6000mb -l mem=6000mb $job_dir/$newtag-$evt_first-$nexpts.sbatch`;
    }

    if($resource eq "KEKCC") {
	$sbatchfile = "$job_dir/$tag-$evt_first-$nexpts.sbatch";
	open(PBS, ">$sbatchfile") or die("Can not create the sbatch script");
	print PBS "#!/bin/csh \n";
	print PBS "source $softw_dir/T2KND280Up_CLHEP.csh \n";
	print PBS "cd $job_dir \n";
	print PBS "\n";
	print PBS "env \n";
	print PBS "\n";
	print PBS "uname -n \n";
	print PBS "\n";
	print PBS "$command \n";
	close(PBS);
	`chmod 765 $sbatchfile`;
	`bsub -q $queue $sbatchfile`;
    }
    
    if($resource eq "interactive") {
	system($command);
    }
    
    $irun=$irun+1; # increment job id
    
} # loop over jobs

